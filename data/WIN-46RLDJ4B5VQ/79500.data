{'FSHARPINSTALLDIR': 'C:\\Program Files (x86)\\Microsoft SDKs\\F#\\3.0\\Framework\\v4.0\\', 'TMP': 'C:\\Users\\test\\AppData\\Local\\Temp', 'COMPUTERNAME': 'WIN-46RLDJ4B5VQ', 'VS110COMNTOOLS': 'C:\\Program Files (x86)\\Microsoft Visual Studio 11.0\\Common7\\Tools\\', 'LIB': 'C:\\Program Files (x86)\\Microsoft Visual Studio 11.0\\VC\\LIB;C:\\Program Files (x86)\\Microsoft Visual Studio 11.0\\VC\\ATLMFC\\LIB;C:\\Program Files (x86)\\Windows Kits\\8.0\\lib\\win8\\um\\x86;', 'USERDOMAIN': 'WIN-46RLDJ4B5VQ', 'PSMODULEPATH': 'C:\\Windows\\system32\\WindowsPowerShell\\v1.0\\Modules\\', 'LIBPATH': 'C:\\Windows\\Microsoft.NET\\Framework\\v4.0.30319;C:\\Windows\\Microsoft.NET\\Framework\\v3.5;C:\\Program Files (x86)\\Microsoft Visual Studio 11.0\\VC\\LIB;C:\\Program Files (x86)\\Microsoft Visual Studio 11.0\\VC\\ATLMFC\\LIB;C:\\Program Files (x86)\\Windows Kits\\8.0\\References\\CommonConfiguration\\Neutral;C:\\Program Files (x86)\\Microsoft SDKs\\Windows\\v8.0\\ExtensionSDKs\\Microsoft.VCLibs\\11.0\\References\\CommonConfiguration\\neutral;', 'COMMONPROGRAMFILES': 'C:\\Program Files (x86)\\Common Files', 'PROCESSOR_IDENTIFIER': 'Intel64 Family 6 Model 60 Stepping 3, GenuineIntel', 'PROGRAMFILES': 'C:\\Program Files (x86)', 'PROCESSOR_REVISION': '3c03', 'PATHEXT': '.COM;.EXE;.BAT;.CMD;.VBS;.VBE;.JS;.JSE;.WSF;.WSH;.MSC', 'SYSTEMROOT': 'C:\\Windows', 'PROGRAMFILES(X86)': 'C:\\Program Files (x86)', 'FRAMEWORKVERSION32': 'v4.0.30319', 'MPCONFIG_PRODUCTAPPDATAPATH': 'C:\\ProgramData\\Microsoft\\Windows Defender', 'TEMP': 'C:\\Users\\test\\AppData\\Local\\Temp', 'WINDOWSSDKDIR_35': 'C:\\Program Files (x86)\\Microsoft SDKs\\Windows\\v7.0A\\Bin\\', 'COMMONPROGRAMFILES(X86)': 'C:\\Program Files (x86)\\Common Files', 'PROGRAMDATA': 'C:\\ProgramData', 'PROCESSOR_ARCHITECTURE': 'x86', 'VSINSTALLDIR': 'C:\\Program Files (x86)\\Microsoft Visual Studio 11.0\\', 'ALLUSERSPROFILE': 'C:\\ProgramData', 'USERPROFILE': 'C:\\Users\\test', 'LOCALAPPDATA': 'C:\\Users\\test\\AppData\\Local', 'HOMEPATH': '\\Users\\test', 'FRAMEWORKDIR': 'C:\\Windows\\Microsoft.NET\\Framework\\', 'MPCONFIG_REPORTINGGUID': '5EF34043-DA22-4FD1-803D-3ADC1588833A', 'PROGRAMW6432': 'C:\\Program Files', 'MPCONFIG_PRODUCTCODENAME': 'AntiSpyware', 'USERNAME': 'test', 'LOGONSERVER': '\\\\WIN-46RLDJ4B5VQ', 'PROMPT': '$P$G', 'SESSIONNAME': 'Console', 'MPCONFIG_PRODUCTUSERAPPDATAPATH': 'C:\\Users\\test\\AppData\\Local\\Microsoft\\Windows Defender', 'PATH': 'C:\\Program Files (x86)\\Microsoft Visual Studio 11.0\\Common7\\IDE\\CommonExtensions\\Microsoft\\TestWindow;C:\\Program Files (x86)\\Microsoft SDKs\\F#\\3.0\\Framework\\v4.0\\;C:\\Program Files (x86)\\Microsoft Visual Studio 11.0\\VSTSDB\\Deploy;C:\\Program Files (x86)\\Microsoft Visual Studio 11.0\\Common7\\IDE\\;C:\\Program Files (x86)\\Microsoft Visual Studio 11.0\\VC\\BIN;C:\\Program Files (x86)\\Microsoft Visual Studio 11.0\\Common7\\Tools;C:\\Windows\\Microsoft.NET\\Framework\\v4.0.30319;C:\\Windows\\Microsoft.NET\\Framework\\v3.5;C:\\Program Files (x86)\\Microsoft Visual Studio 11.0\\VC\\VCPackages;C:\\Program Files (x86)\\HTML Help Workshop;C:\\Program Files (x86)\\Microsoft Visual Studio 11.0\\Team Tools\\Performance Tools;C:\\Program Files (x86)\\Windows Kits\\8.0\\bin\\x86;C:\\Program Files (x86)\\Microsoft SDKs\\Windows\\v8.0A\\bin\\NETFX 4.0 Tools;C:\\Program Files (x86)\\Microsoft SDKs\\Windows\\v7.0A\\Bin\\;C:\\Windows\\system32;C:\\Windows;C:\\Windows\\System32\\Wbem;C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\;C:\\Program Files\\Microsoft\\Web Platform Installer\\;C:\\Program Files (x86)\\Microsoft ASP.NET\\ASP.NET Web Pages\\v1.0\\;C:\\Program Files (x86)\\Windows Kits\\8.0\\Windows Performance Toolkit\\;C:\\Program Files\\Microsoft SQL Server\\110\\Tools\\Binn\\;C:\\Program Files (x86)\\Git\\cmd', 'EXTENSIONSDKDIR': 'C:\\Program Files (x86)\\Microsoft SDKs\\Windows\\v8.0\\ExtensionSDKs', 'WINDOWSSDKDIR_OLD': 'C:\\Program Files (x86)\\Microsoft SDKs\\Windows\\v8.0A\\', 'VISUALSTUDIOVERSION': '11.0', 'INCLUDE': 'C:\\Program Files (x86)\\Microsoft Visual Studio 11.0\\VC\\INCLUDE;C:\\Program Files (x86)\\Microsoft Visual Studio 11.0\\VC\\ATLMFC\\INCLUDE;C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared;C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um;C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\winrt;', 'FP_NO_HOST_CHECK': 'NO', 'WINDIR': 'C:\\Windows', 'FRAMEWORK35VERSION': 'v3.5', 'WINDOWSSDKDIR': 'C:\\Program Files (x86)\\Windows Kits\\8.0\\', 'MPCONFIG_PRODUCTPATH': 'C:\\Program Files\\Windows Defender', 'APPDATA': 'C:\\Users\\test\\AppData\\Roaming', 'HOMEDRIVE': 'C:', 'OS': 'Windows_NT', 'SYSTEMDRIVE': 'C:', 'COMSPEC': 'C:\\Windows\\system32\\cmd.exe', 'NUMBER_OF_PROCESSORS': '1', 'DEVENVDIR': 'C:\\Program Files (x86)\\Microsoft Visual Studio 11.0\\Common7\\IDE\\', 'PROCESSOR_LEVEL': '6', 'PROCESSOR_ARCHITEW6432': 'AMD64', 'FRAMEWORKDIR32': 'C:\\Windows\\Microsoft.NET\\Framework\\', 'COMMONPROGRAMW6432': 'C:\\Program Files\\Common Files', 'FRAMEWORKVERSION': 'v4.0.30319', 'PUBLIC': 'C:\\Users\\Public', 'VCINSTALLDIR': 'C:\\Program Files (x86)\\Microsoft Visual Studio 11.0\\VC\\'}